datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

// User model for both employees and customers
model User {
    id        String   @id @default(uuid())
    email     String   @unique
    password  String
    firstName String
    lastName  String
    role      UserRole @default(CUSTOMER)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    createdTickets  Ticket[]     @relation("CreatedBy")
    assignedTickets Ticket[]     @relation("AssignedTo")
    teamMemberships TeamMember[]
    comments        Comment[]
}

model Team {
    id          String   @id @default(uuid())
    name        String
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    members TeamMember[]
    tickets Ticket[]
}

model TeamMember {
    id        String   @id @default(uuid())
    userId    String
    teamId    String
    role      TeamRole @default(AGENT)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    user User @relation(fields: [userId], references: [id])
    team Team @relation(fields: [teamId], references: [id])

    @@unique([userId, teamId])
}

model Ticket {
    id           String       @id @default(uuid())
    title        String
    description  String
    status       TicketStatus @default(OPEN)
    priority     Priority     @default(MEDIUM)
    createdById  String
    assignedToId String?
    teamId       String?
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt

    // Relations
    createdBy  User             @relation("CreatedBy", fields: [createdById], references: [id])
    assignedTo User?            @relation("AssignedTo", fields: [assignedToId], references: [id])
    team       Team?            @relation(fields: [teamId], references: [id])
    comments   Comment[]
    tags       TagsOnTickets[]
    metadata   TicketMetadata[]
    Feedback   Feedback[]
}

model Comment {
    id         String   @id @default(uuid())
    content    String
    ticketId   String
    userId     String
    isInternal Boolean  @default(false)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    // Relations
    ticket Ticket @relation(fields: [ticketId], references: [id])
    user   User   @relation(fields: [userId], references: [id])
}

model Tag {
    id          String   @id @default(uuid())
    name        String   @unique
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    tickets TagsOnTickets[]
}

model TagsOnTickets {
    ticketId  String
    tagId     String
    createdAt DateTime @default(now())

    // Relations
    ticket Ticket @relation(fields: [ticketId], references: [id])
    tag    Tag    @relation(fields: [tagId], references: [id])

    @@id([ticketId, tagId])
}

model TicketMetadata {
    id        String   @id @default(uuid())
    ticketId  String
    key       String
    value     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    ticket Ticket @relation(fields: [ticketId], references: [id])

    @@unique([ticketId, key])
}

model Feedback {
    id        String   @id @default(uuid())
    ticketId  String
    rating    Int
    comment   String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    ticket Ticket @relation(fields: [ticketId], references: [id])
}

enum UserRole {
    ADMIN
    AGENT
    CUSTOMER
}

enum TeamRole {
    LEADER
    AGENT
}

enum TicketStatus {
    OPEN
    IN_PROGRESS
    PENDING
    RESOLVED
    CLOSED
}

enum Priority {
    LOW
    MEDIUM
    HIGH
    URGENT
}
